/*
 * package com.herc.ewcm.core.impl.servlets;
 * 
 * import java.io.File; import java.io.FileInputStream; import
 * java.io.FileOutputStream; import java.io.IOException; import
 * java.io.OutputStreamWriter; import java.io.Writer; import
 * java.rmi.ServerException; import java.util.List;
 * 
 * import javax.servlet.ServletException;
 * 
 * import org.apache.felix.scr.annotations.Component; import
 * org.apache.felix.scr.annotations.Properties; import
 * org.apache.felix.scr.annotations.Property; import
 * org.apache.felix.scr.annotations.Service; import
 * org.apache.sling.api.SlingHttpServletRequest; import
 * org.apache.sling.api.SlingHttpServletResponse; import
 * org.apache.sling.api.resource.Resource; import org.slf4j.Logger; import
 * org.slf4j.LoggerFactory;
 * 
 * import com.amazonaws.auth.AWSCredentials; import
 * com.amazonaws.auth.BasicAWSCredentials; import
 * com.amazonaws.services.s3.AmazonS3; import
 * com.amazonaws.services.s3.AmazonS3Client; import
 * com.amazonaws.services.s3.model.ObjectListing; import
 * com.amazonaws.services.s3.model.ObjectMetadata; import
 * com.amazonaws.services.s3.model.PutObjectRequest; import
 * com.amazonaws.services.s3.model.PutObjectResult; import
 * com.day.cq.search.facets.Bucket;
 * 
 * @Component(name = "awsupload.herc.awsupload.core.AWSS3UpLoadServlet", label =
 * "AWSS3UpLoadServlet", description =
 * "This servlet results for given question or product", specVersion = "1.1",
 * metatype = true)
 * 
 * @Service()
 * 
 * @Properties({
 * 
 * @Property(name = "service.description", value = "Herc"),
 * 
 * @Property(name = "service.vendor", value = "Herc Equipment."),
 * 
 * @Property(name = "sling.servlet.paths", value =
 * "/apps/awsupload/servlets/AWSS3UpLoadServlet"),
 * 
 * @Property(name = "sling.servlet.methods", value = "POST"),
 * 
 * @Property(name = "sling.servlet.extensions", value = "json"),
 * 
 * @Property(name = "sling.auth.requirements", value =
 * "-/apps/awsupload/servlets/AWSS3UpLoadServlet") }) public class
 * AWSS3UpLoadServlet extends
 * org.apache.sling.api.servlets.SlingAllMethodsServlet {
 * 
 *//**
	* 
	*/
/*
 * private static final long serialVersionUID = 1L; protected final Logger log =
 * LoggerFactory .getLogger(AWSS3UpLoadServlet.class);
 * 
 * @Override protected void doGet(final SlingHttpServletRequest req, final
 * SlingHttpServletResponse resp) throws ServletException, IOException { final
 * Resource resource = req.getResource();
 * resp.getOutputStream().println(resource.toString());
 * resp.getOutputStream().println(
 * "This content is generated by the SimpleServlet"); doPost(req,resp); }
 * 
 *//**
	 * This method handles all the post requests that are received by this servlet.
	 * 
	 * @param request           the Sling HTTP request
	 * @param response          the Sling HTTP response
	 * @param getDoctypeJsonObj (sqlStmt, )
	 * @throws ServletException
	 * @throws IOException
	 */
/*
 * 
 * protected void upload(SlingHttpServletRequest request,
 * SlingHttpServletResponse response) throws ServerException, IOException {
 * 
 * 
 * try { log.info("Inside dopost"); //AmazonS3 conn =
 * getAWSS3Connection("AKIAID2VV4LPGHZHDULA",
 * "xU953t0+4wJ7FBt1+mc8ZgwMOwj6RWKGPctlKsgQ", "com.amazonaws.us-east-1.s3");
 * AmazonS3 conn = getAWSS3Connection("AKIAID2VV4LPGHZHDULA",
 * "xU953t0+4wJ7FBt1+mc8ZgwMOwj6RWKGPctlKsgQ", "s3.us-east-1.amazonaws.com");
 * log.info("inside :"+conn.getS3AccountOwner()); ObjectListing list =
 * conn.listObjects("hercmobility");
 * log.info("size***********************:"+list.getMaxKeys()); working :
 * conn.putObject(new PutObjectRequest("hercmobility", "ABC",
 * createSampleFile())); listBuckets(conn); String existingBucketName =
 * "hercmobility"; String keyName = "mypic.JPG"; String filePath =
 * "/home/dkommera/Tulips.jpg"; String
 * amazonFileUploadLocationOriginal=existingBucketName+"/"; FileInputStream
 * stream = new FileInputStream(filePath); ObjectMetadata objectMetadata = new
 * ObjectMetadata(); PutObjectRequest putObjectRequest = new
 * PutObjectRequest(amazonFileUploadLocationOriginal, keyName, stream,
 * objectMetadata); PutObjectResult result = conn.putObject(putObjectRequest);
 * log.info("Etag:" + result.getETag() + "-->" + result); }
 * 
 * catch (Exception e) { log.error("Exception in dopost()method", e); } }
 * 
 * 
 * public AmazonS3 getAWSS3Connection(String accessKey,String secretKey,String
 * endPointURL){
 * 
 * log.
 * info("******************inside getAWSS3Connection this is $$$$$$$$*******************"
 * ); log.info("accessKey:-"+accessKey); log.info("secretKey:-"+secretKey);
 * log.info("endPointURL:-"+endPointURL); AWSCredentials credentials = new
 * BasicAWSCredentials(accessKey, secretKey); AmazonS3 conn = new
 * AmazonS3Client(credentials); // conn.setEndpoint(endPointURL); // AmazonS3
 * conn = new AmazonS3Client(credentials);
 * 
 * log.info("conn change************:-"+conn); return conn;
 * 
 * }
 * 
 * public void listBuckets(AmazonS3 connection) throws Exception{ try{
 * log.info("connection :-"+connection); List<Bucket> buckets =
 * connection.listBuckets(); for (Bucket bucket : buckets) {
 * log.info(bucket.getName() + "\t"); } }catch(Exception ex){
 * log.error("conn************:-",ex); throw ex; }
 * 
 * 
 * }
 * 
 *//**
	 * Creates a temporary file with text data to demonstrate uploading a file to
	 * Amazon S3
	 *
	 * @return A newly created temporary file with text data.
	 *
	 * @throws IOException
	 *//*
		 * private static File createSampleFile() throws IOException { File file =
		 * File.createTempFile("aws-java-sdk-", ".txt"); file.deleteOnExit();
		 * 
		 * Writer writer = new OutputStreamWriter(new FileOutputStream(file));
		 * writer.write("abcdefghijklmnopqrstuvwxyz\n");
		 * writer.write("01234567890112345678901234\n");
		 * writer.write("!@#$%^&*()-=[]{};':',.<>/?\n");
		 * writer.write("01234567890112345678901234\n");
		 * writer.write("abcdefghijklmnopqrstuvwxyz\n"); writer.close();
		 * 
		 * return file; }
		 * 
		 * // public void listBucketsContent(AmazonS3 conn){ // ObjectListing objects =
		 * conn.listObjects(bucket.getName()); // do { // for (S3ObjectSummary
		 * objectSummary : objects.getObjectSummaries()) { //
		 * System.out.println(objectSummary.getKey() + "\t" + // ObjectSummary.getSize()
		 * + "\t" + // StringUtils.fromDate(objectSummary.getLastModified())); // } //
		 * objects = conn.listNextBatchOfObjects(objects); // } while
		 * (objects.isTruncated()); // }
		 * 
		 * }
		 */